/* osgEarth
* Copyright 2025 Pelican Mapping
* MIT License
*/
#ifndef OSGEARTH_UTIL_GRATICULE_LABELING_ENGINE_H
#define OSGEARTH_UTIL_GRATICULE_LABELING_ENGINE_H 1

#include <osgEarth/Common>
#include <osgEarth/ClipSpace>
#include <osgEarth/GeoData>
#include <osgEarth/MapNode>
#include <osgEarth/Containers>
#include <osgEarth/LabelNode>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;

    /**
     * Node that plots graticule coordinates labels along the edge of the
     * viewport when you are looking straight down on a zoomed-in area.
     */
    class GraticuleLabelingEngine : public osg::Group
    {
    public:
        //! Construct a new labeling engine with the map's SRS
        GraticuleLabelingEngine(const SpatialReference* srs);

        bool getVisible(osg::Camera* camera);

        //! Set the labeling style for all labels
        void setStyle(const Style& style);

        //! Set the labeling style for X and Y labels separately
        void setStyles(const Style& xStyle, const Style& yStyle);

    public: // osg::Node
        void traverse(osg::NodeVisitor& nv);

    protected:
        typedef std::vector< osg::ref_ptr<LabelNode> > LabelNodeVector;

        struct CameraData
        {
            CameraData():
                visible(false)
            {
            }

            LabelNodeVector xLabels;
            LabelNodeVector yLabels;
            bool visible;
        };
        
        bool cullTraverse(osgUtil::CullVisitor& nv, CameraData& data);

        // Override to place labels
        virtual bool updateLabels(const osg::Vec3d& LL_world, osg::Vec3d& UL_world, osg::Vec3d& LR_world, ClipSpace& window, CameraData& data);
        
        typedef PerObjectFastMap<osg::Camera*, CameraData> CameraDataMap;
        CameraDataMap _cameraDataMap;

        struct AcceptCameraData : public CameraDataMap::Functor {
            AcceptCameraData(osg::NodeVisitor& nv) : _nv(nv) { }
            void operator()(CameraData& data);
            osg::NodeVisitor& _nv;
        };

        struct UpdateLabelStyles : public CameraDataMap::Functor {
            UpdateLabelStyles(const Style& xStyle, const Style& yStyle) : _xStyle(&xStyle), _yStyle(&yStyle) { }
            void operator()(CameraData& data);
            const Style* _xStyle;
            const Style* _yStyle;
        };

        osg::ref_ptr<const SpatialReference> _srs;
        Style _xLabelStyle, _yLabelStyle;      
    };

} } // namespace osgEarth::Util

#endif // OSGEARTH_UTIL_GRATICULE_LABELING_ENGINE_H
