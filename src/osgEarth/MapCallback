/* osgEarth
 * Copyright 2025 Pelican Mapping
 * MIT License
 */

#ifndef OSGEARTH_MAP_CALLBACK_H
#define OSGEARTH_MAP_CALLBACK_H 1

#include <osgEarth/Common>
#include <osg/ref_ptr>
#include <list>

namespace osgEarth
{
    class Layer;
    struct MapModelChange;

    /**
     * Callback that the Map object uses to notify listeners of map data model changes.
     */
    struct OSGEARTH_EXPORT MapCallback : public osg::Referenced
    {
        //! Invoked when a batch operation begins.
        virtual void onBeginUpdate() { }

        //! Invoked when a batch operation ends.
        virtual void onEndUpdate() { }

        //! Invoked whenever a layer is added, removed, or moved from a Map.
        //! The default implementation in turn calls onLayerAdded, onLayerRemoved,
        //! or onLayerMoved, respectively.
        virtual void onMapModelChanged(const MapModelChange& change);

        //! Invoked when a layer is added to a Map.
        virtual void onLayerAdded(Layer* layer, unsigned index) { }

        //! Invoked when a layer is removed from a Map.
        virtual void onLayerRemoved(Layer* layer, unsigned index) { }

        //! Invoked when a layer is re-ordered within a Map.
        virtual void onLayerMoved(Layer* layer, unsigned oldIndex, unsigned newIndex) { }

        //! Invoked when a layer is opened (calls onLayerEnabled for back compat)
        virtual void onLayerOpened(Layer* layer) { onLayerEnabled(layer); }

        //! Invoked when a layer is closed (calls onLayerDisabled for back compat)
        virtual void onLayerClosed(Layer* layer) { onLayerDisabled(layer); }

    public: // backwards compatibility only.

        virtual void onLayerEnabled(Layer* layer) { }
        virtual void onLayerDisabled(Layer* layer) { }

    public:
        /** dtor */
        virtual ~MapCallback() { }

        /**
         * Invokes a callback method for all layers in the specified Map.
         * This is useful if you create a callback for a Map that already has
         * existing Layers in it and you want to "simulate" adding/removing them all.
         */
        void invokeOnLayerAdded(const class Map*);
        void invokeOnLayerRemoved(const class Map*);
    };

    typedef std::list< osg::ref_ptr<MapCallback> > MapCallbackList;
}

#endif // OSGEARTH_MAP_CALLBACK_H
