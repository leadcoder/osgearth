
#ifndef OSGEART_PBR_MATERIAL
#define OSGEART_PBR_MATERIAL

#include <osgEarth/VirtualProgram>
#include <osgDB/ReadFile>
#include <osg/TextureCubeMap>
#include <osg/Texture2D>
#include <osgDB/FileNameUtils>
#include <osgDB/FileUtils>

namespace osgEarth
{
#if 1
	osg::ref_ptr<osg::TextureCubeMap> loadCubeMap(const std::string& filePath)
	{
		osg::ref_ptr<osg::TextureCubeMap> cubemap;

		std::string absolutePath = osgDB::findDataFile(filePath);
		std::map<std::string, std::string> imageMap;

		osgDB::DirectoryContents contents = osgDB::getDirectoryContents(absolutePath);
		for (unsigned int i = 0; i < contents.size(); ++i)
		{
			std::string filenameInDir = osgDB::convertToLowerCase(contents[i]);

			if (filenameInDir == "." ||
				filenameInDir == "..")
			{
				continue;
			}


			if (filenameInDir.find("c00") != std::string::npos || filenameInDir.find("right") != std::string::npos)
			{
				imageMap["posx"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("c01") != std::string::npos || filenameInDir.find("left") != std::string::npos)
			{
				imageMap["negx"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("c02") != std::string::npos || filenameInDir.find("top") != std::string::npos)
			{
				imageMap["posy"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("c03") != std::string::npos || filenameInDir.find("bottom") != std::string::npos)
			{
				imageMap["negy"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("c04") != std::string::npos || filenameInDir.find("front") != std::string::npos)
			{
				imageMap["posz"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("c05") != std::string::npos || filenameInDir.find("back") != std::string::npos)
			{
				imageMap["negz"] = absolutePath + "\\" + contents[i];
			}
		}

		if (imageMap.size() < 6)
			return cubemap;

		osg::ref_ptr<osg::Image> imagePosX = osgDB::readImageFile(imageMap["posx"]);
		osg::ref_ptr<osg::Image> imageNegX = osgDB::readImageFile(imageMap["negx"]);
		osg::ref_ptr<osg::Image> imagePosY = osgDB::readImageFile(imageMap["posy"]);
		osg::ref_ptr<osg::Image> imageNegY = osgDB::readImageFile(imageMap["negy"]);
		osg::ref_ptr<osg::Image> imagePosZ = osgDB::readImageFile(imageMap["posz"]);
		osg::ref_ptr<osg::Image> imageNegZ = osgDB::readImageFile(imageMap["negz"]);


		if (imagePosX.valid() && imageNegX.valid() && imagePosY.valid() && imageNegY.valid() && imagePosZ.valid() && imageNegZ.valid())
		{
		
			/*imagePosX->setInternalTextureFormat(GL_SRGB8);
			imageNegX->setInternalTextureFormat(GL_SRGB8);
			imagePosY->setInternalTextureFormat(GL_SRGB8);
			imageNegY->setInternalTextureFormat(GL_SRGB8);
			imagePosZ->setInternalTextureFormat(GL_SRGB8);
			imageNegZ->setInternalTextureFormat(GL_SRGB8);*/
			
			cubemap = new osg::TextureCubeMap;
			cubemap->setImage(osg::TextureCubeMap::POSITIVE_X, imagePosX);
			cubemap->setImage(osg::TextureCubeMap::NEGATIVE_X, imageNegX);
			cubemap->setImage(osg::TextureCubeMap::POSITIVE_Y, imagePosY);
			cubemap->setImage(osg::TextureCubeMap::NEGATIVE_Y, imageNegY);
			cubemap->setImage(osg::TextureCubeMap::POSITIVE_Z, imagePosZ);
			cubemap->setImage(osg::TextureCubeMap::NEGATIVE_Z, imageNegZ);

			cubemap->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
			cubemap->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
			cubemap->setWrap(osg::Texture::WRAP_R, osg::Texture::CLAMP_TO_EDGE);


			cubemap->setFilter(osg::Texture::MIN_FILTER, osg::Texture::LINEAR_MIPMAP_LINEAR);
			cubemap->setFilter(osg::Texture::MAG_FILTER, osg::Texture::LINEAR);

			//cubemap->setFilter(osg::Texture::MIN_FILTER, osg::Texture::NEAREST);
			//cubemap->setFilter(osg::Texture::MAG_FILTER, osg::Texture::NEAREST);
		}

		return cubemap.get();
	}
#else
	osg::ref_ptr<osg::TextureCubeMap> loadCubeMap(const std::string& filePath)
	{
		osg::ref_ptr<osg::TextureCubeMap> cubemap;

		std::string absolutePath = osgDB::findDataFile(filePath);
		std::map<std::string, std::string> imageMap;

		osgDB::DirectoryContents contents = osgDB::getDirectoryContents(absolutePath);
		for (unsigned int i = 0; i < contents.size(); ++i)
		{
			std::string filenameInDir = osgDB::convertToLowerCase(contents[i]);

			if (filenameInDir == "." ||
				filenameInDir == "..")
			{
				continue;
			}


			if (filenameInDir.find("posx") != std::string::npos || filenameInDir.find("right") != std::string::npos)
			{
				imageMap["posx"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("negx") != std::string::npos || filenameInDir.find("left") != std::string::npos)
			{
				imageMap["negx"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("posy") != std::string::npos || filenameInDir.find("top") != std::string::npos)
			{
				imageMap["posy"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("negy") != std::string::npos || filenameInDir.find("bottom") != std::string::npos)
			{
				imageMap["negy"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("posz") != std::string::npos || filenameInDir.find("front") != std::string::npos)
			{
				imageMap["posz"] = absolutePath + "\\" + contents[i];
			}

			if (filenameInDir.find("negz") != std::string::npos || filenameInDir.find("back") != std::string::npos)
			{
				imageMap["negz"] = absolutePath + "\\" + contents[i];
			}
		}

		if (imageMap.size() < 6)
			return cubemap;

		osg::ref_ptr<osg::Image> imagePosX = osgDB::readImageFile(imageMap["posx"]);
		osg::ref_ptr<osg::Image> imageNegX = osgDB::readImageFile(imageMap["negx"]);
		osg::ref_ptr<osg::Image> imagePosY = osgDB::readImageFile(imageMap["posy"]);
		osg::ref_ptr<osg::Image> imageNegY = osgDB::readImageFile(imageMap["negy"]);
		osg::ref_ptr<osg::Image> imagePosZ = osgDB::readImageFile(imageMap["posz"]);
		osg::ref_ptr<osg::Image> imageNegZ = osgDB::readImageFile(imageMap["negz"]);


		if (imagePosX.valid() && imageNegX.valid() && imagePosY.valid() && imageNegY.valid() && imagePosZ.valid() && imageNegZ.valid())
		{
			imagePosX->flipVertical();
			imageNegX->flipVertical();
			imagePosY->flipVertical();
			imageNegY->flipVertical();
			imagePosZ->flipVertical();
			imageNegZ->flipVertical();

			imagePosX->flipHorizontal();
			imageNegX->flipHorizontal();
			imagePosY->flipHorizontal();
			imageNegY->flipHorizontal();
			imagePosZ->flipHorizontal();
			imageNegZ->flipHorizontal();

			imagePosX->setInternalTextureFormat(GL_SRGB8);
			imageNegX->setInternalTextureFormat(GL_SRGB8);
			imagePosY->setInternalTextureFormat(GL_SRGB8);
			imageNegY->setInternalTextureFormat(GL_SRGB8);
			imagePosZ->setInternalTextureFormat(GL_SRGB8);
			imageNegZ->setInternalTextureFormat(GL_SRGB8);

			cubemap = new osg::TextureCubeMap;
			cubemap->setImage(osg::TextureCubeMap::POSITIVE_X, imagePosX);
			cubemap->setImage(osg::TextureCubeMap::NEGATIVE_X, imageNegX);
			cubemap->setImage(osg::TextureCubeMap::POSITIVE_Y, imagePosY);
			cubemap->setImage(osg::TextureCubeMap::NEGATIVE_Y, imageNegY);
			cubemap->setImage(osg::TextureCubeMap::POSITIVE_Z, imagePosZ);
			cubemap->setImage(osg::TextureCubeMap::NEGATIVE_Z, imageNegZ);

			cubemap->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
			cubemap->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
			cubemap->setWrap(osg::Texture::WRAP_R, osg::Texture::CLAMP_TO_EDGE);


			cubemap->setFilter(osg::Texture::MIN_FILTER, osg::Texture::LINEAR_MIPMAP_LINEAR);
			cubemap->setFilter(osg::Texture::MAG_FILTER, osg::Texture::LINEAR);

			//cubemap->setFilter(osg::Texture::MIN_FILTER, osg::Texture::NEAREST);
			//cubemap->setFilter(osg::Texture::MAG_FILTER, osg::Texture::NEAREST);
		}

		return cubemap.get();
	}
#endif

	 const char* PBR_VS = R"(
    #version 330 compatibility
    #pragma import_defines(PBR_NORMAL_MAP)
#ifdef PBR_NORMAL_MAP
    in vec4 oe_pbr_tangent;
    out mat3 oe_pbr_TBN;
#endif
    out vec4 oe_pbr_texcoord0;
    vec3 vp_Normal;
    void pbr_vs(inout vec4 vertex_model)
    {
        oe_pbr_texcoord0 = gl_MultiTexCoord0;
#ifdef PBR_NORMAL_MAP
        vec3 normal = normalize(vp_Normal);
        vec3 tangent = normalize(gl_NormalMatrix*oe_pbr_tangent.xyz);
        vec3 bitangent = normalize(cross(normal, tangent) * oe_pbr_tangent.w);
        oe_pbr_TBN = mat3(tangent, bitangent, normal);
#endif
    }
)";

	 const char* PBR_FS = R"(
    #version 430
    #pragma import_defines(PBR_METALROUGHNESS_MAP)
    #pragma import_defines(PBR_NORMAL_MAP)
    #pragma import_defines(PBR_COLOR_MAP)
	#pragma import_defines(PBR_EMISSIVE_MAP)
	#pragma import_defines(PBR_OCCLUSION_IN_METALROUGHNESS_MAP)

    // fragment stage global PBR parameters.
    struct OE_PBR {
        float roughness;
        float ao;
        float metal;
        float brightness;
        float contrast;
    } oe_pbr;
	vec3 oe_pbr_emissive;

    uniform float oe_pbr_brightness = 1.0;
    uniform float oe_pbr_contrast = 1.0;
    uniform float oe_pbr_roughness_factor = 1.0;
    uniform float oe_pbr_metal_factor = 1.0;
	uniform float oe_pbr_ao_factor = 1.0;
	uniform vec3 oe_pbr_emissive_factor = vec3(1.0);
	uniform vec3 oe_pbr_color_factor = vec3(1.0);
	
    vec3 vp_Normal;
    in vec4 oe_pbr_texcoord0;

#ifdef PBR_COLOR_MAP
    uniform sampler2D oe_pbr_color_sampler;
#endif

#ifdef PBR_NORMAL_MAP
    in mat3 oe_pbr_TBN;
    uniform sampler2D oe_pbr_normal_sampler;
#endif

#ifdef PBR_METALROUGHNESS_MAP
    uniform sampler2D oe_pbr_metal_roughness_sampler;
#endif

#ifdef PBR_EMISSIVE_MAP
      uniform sampler2D oe_pbr_emissive_sampler;
#endif

vec4 SRGBtoLINEAR2(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
    return vec4(linOut,srgbIn.w);
}

    void pbr_fs(inout vec4 color)
    {
#ifdef PBR_NORMAL_MAP
        vec3 n = texture(oe_pbr_normal_sampler, oe_pbr_texcoord0.xy).xyz * 2 -1;
        vp_Normal = normalize(oe_pbr_TBN * n);
#endif
        oe_pbr.roughness = oe_pbr_roughness_factor;
		oe_pbr.metal = oe_pbr_metal_factor;
#ifdef PBR_METALROUGHNESS_MAP
        vec4 mr_map = texture(oe_pbr_metal_roughness_sampler, oe_pbr_texcoord0.xy);
        oe_pbr.roughness = oe_pbr.roughness *  mr_map.g; //pow(mr_map.g, 1.0 / 2.2);
		oe_pbr.metal = oe_pbr.metal * mr_map.b;
		//oe_pbr.ao =  mix(1.0, mr_map.r, oe_pbr_ao_factor);
#ifdef PBR_OCCLUSION_IN_METALROUGHNESS_MAP
		oe_pbr.ao =  mix(mr_map.r, 1.0, oe_pbr_ao_factor);
#endif

#endif
		

        oe_pbr.brightness = oe_pbr_brightness;
	    oe_pbr.contrast = oe_pbr_contrast;
		color.rgb = oe_pbr_color_factor;
#ifdef PBR_COLOR_MAP
		vec4 albedo = texture(oe_pbr_color_sampler, oe_pbr_texcoord0.xy);
        color = color * albedo;
		color.a = albedo.a;
#endif
	oe_pbr_emissive = oe_pbr_emissive_factor;
#ifdef PBR_EMISSIVE_MAP
	oe_pbr_emissive *= SRGBtoLINEAR2(texture(oe_pbr_emissive_sampler, oe_pbr_texcoord0.xy)).rgb;
#endif

    }
)";

	class PbrUberMaterial : public osg::StateSet
	{
	public:
		enum class TexUnits
		{
			COLOR = 0,
			ROUGHNESS_METAL = 1,
			NORMAL = 2,
			IBL_IRRADIANCE = 3,
			IBL_BRDF_LUT = 4,
			EMISSIVE = 5
		};

		osg::Texture2D* m_LutTexture = nullptr;

		enum class VertexAttrib
		{
			TANGENT = 6,
		};

		PbrUberMaterial(osg::Texture2D* lut_tex = nullptr)
		{
			auto* vp = osgEarth::VirtualProgram::getOrCreate(this);
			vp->setInheritShaders(true);
			vp->setFunction("pbr_vs", PBR_VS, osgEarth::ShaderComp::LOCATION_VERTEX_VIEW, 1.1f);
			vp->setFunction("pbr_fs", PBR_FS, osgEarth::ShaderComp::LOCATION_FRAGMENT_COLORING, 0.5f);
			vp->addBindAttribLocation("oe_pbr_tangent", (int)VertexAttrib::TANGENT);
			getOrCreateUniform("oe_pbr_color_sampler", osg::Uniform::SAMPLER_2D)->set((int)TexUnits::COLOR);
			getOrCreateUniform("oe_pbr_metal_roughness_sampler", osg::Uniform::SAMPLER_2D)->set((int)TexUnits::ROUGHNESS_METAL);
			getOrCreateUniform("oe_pbr_normal_sampler", osg::Uniform::SAMPLER_2D)->set((int)TexUnits::NORMAL);
			getOrCreateUniform("oe_pbr_emissive_sampler", osg::Uniform::SAMPLER_2D)->set((int)TexUnits::EMISSIVE);

			setDefine("PBR_IRRADIANCE_MAP");
			setMode(GL_TEXTURE_CUBE_MAP_SEAMLESS, osg::StateAttribute::ON);
			//auto irradiance_texture = loadCubeMap("Environment0");
			auto irradiance_texture = loadCubeMap("C:/Users/johan/Downloads/Basketball_Court/out/test");
			setTextureAttribute((int)TexUnits::IBL_IRRADIANCE, irradiance_texture, osg::StateAttribute::ON);
			getOrCreateUniform("oe_pbr_irradiance", osg::Uniform::SAMPLER_CUBE)->set((int)TexUnits::IBL_IRRADIANCE);

			//osg::ref_ptr<osg::Image> image = osgDB::readRefImageFile("ibl_brdf_lut.png");
			m_LutTexture = lut_tex;
			if (m_LutTexture == nullptr)
			{
				osg::ref_ptr<osg::Image> image = osgDB::readRefImageFile("brdfLUT.dds");
				m_LutTexture = new osg::Texture2D;
				m_LutTexture->setImage(image);
				m_LutTexture->setWrap(osg::Texture2D::WRAP_S, osg::Texture2D::CLAMP_TO_EDGE);
				m_LutTexture->setWrap(osg::Texture2D::WRAP_T, osg::Texture2D::CLAMP_TO_EDGE);
				m_LutTexture->setFilter(osg::Texture::MIN_FILTER, osg::Texture::LINEAR);
				m_LutTexture->setFilter(osg::Texture::MAG_FILTER, osg::Texture::LINEAR);
			}
			//texture->setInternalFormatMode(GL_SRGB8);
			///texture->setMaxAnisotropy(16.0f);
			setTextureAttribute((int)TexUnits::IBL_BRDF_LUT, m_LutTexture, osg::StateAttribute::ON);
			addUniform(new osg::Uniform("oe_pbr_brdf_lut", (int)TexUnits::IBL_BRDF_LUT));
		}

		//Debug methods
		void setColorMapEnabled(bool value)
		{
			setDefine("PBR_COLOR_MAP", osg::StateAttribute::OVERRIDE | (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}

		void setNormalMapEnabled(bool value)
		{
			setDefine("PBR_NORMAL_MAP", osg::StateAttribute::OVERRIDE | (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}
		
		void setEmissiveMapEnabled(bool value)
		{
			setDefine("PBR_EMISSIVE_MAP", osg::StateAttribute::OVERRIDE | (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}
	};

	class PbrMaterial : public osg::StateSet
	{
	public:
		void setColorMap(osg::Texture2D* tex)
		{
			if (tex)
			{
				setDefine("PBR_COLOR_MAP");
				setTextureAttributeAndModes((int)PbrUberMaterial::TexUnits::COLOR, tex);
			}
		}

		osg::Texture2D* getColorMap()
		{
			return dynamic_cast<osg::Texture2D*>(getTextureAttribute((int)PbrUberMaterial::TexUnits::COLOR, osg::StateAttribute::TEXTURE));
		}

		void setColorMapEnabled(bool value)
		{
			if (hasColorMap())
				setDefine("PBR_COLOR_MAP", (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}

		bool hasColorMap() const
		{
			return getDefinePair("PBR_COLOR_MAP") != nullptr;
		}

		bool getColorMapEnabled() const
		{
			auto def = getDefinePair("PBR_COLOR_MAP");
			if (!def)
				return false;
			return def->second == osg::StateAttribute::ON;
		}

		void setColorFactor(const osg::Vec3f& value)
		{
			getOrCreateUniform("oe_pbr_color_factor", osg::Uniform::FLOAT_VEC3)->set(value);
		}

		osg::Vec3f getColorFactor() const
		{
			osg::Vec3f value(1.0f, 1.0f, 1.0f);
			auto uniform = getUniform("oe_pbr_color_factor");
			if (uniform)
				uniform->get(value);
			return value;
		}


		void setMetalRoughnessMap(osg::Texture2D* tex)
		{
			if (tex)
			{
				setDefine("PBR_METALROUGHNESS_MAP");
				setTextureAttributeAndModes((int)PbrUberMaterial::TexUnits::ROUGHNESS_METAL, tex);
			}
		}

		osg::Texture2D* getMetalRoughnessMap()
		{
			return dynamic_cast<osg::Texture2D*>(getTextureAttribute((int)PbrUberMaterial::TexUnits::ROUGHNESS_METAL, osg::StateAttribute::TEXTURE));
		}

		void setMetalRoughnessMapEnabled(bool value)
		{
			if(hasMetalRoughness())
				setDefine("PBR_METALROUGHNESS_MAP", (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}

		bool hasMetalRoughness() const
		{
			return getDefinePair("PBR_METALROUGHNESS_MAP") != nullptr;
		}

		bool getMetalRoughnessMapEnabled() const
		{
			auto def = getDefinePair("PBR_METALROUGHNESS_MAP");
			if (!def)
				return false;
			return def->second == osg::StateAttribute::ON;
		}

		void setRoughnessFactor(float value)
		{
			getOrCreateUniform("oe_pbr_roughness_factor", osg::Uniform::FLOAT)->set(value);
		}

		float getRoughnessFactor() const
		{
			float value = 1.0f;
			auto uniform = getUniform("oe_pbr_roughness_factor");
			if (uniform)
				uniform->get(value);
			return value;
		}

		void setMetalFactor(float value)
		{
			getOrCreateUniform("oe_pbr_metal_factor", osg::Uniform::FLOAT)->set(value);
		}

		float getMetalFactor() const
		{
			float value = 1.0f;
			auto uniform = getUniform("oe_pbr_metal_factor");
			if (uniform)
				uniform->get(value);
			return value;
		}

		void setNormalMap(osg::Texture2D* tex)
		{
			if (tex)
			{
				setDefine("PBR_NORMAL_MAP");
				setTextureAttributeAndModes((int)PbrUberMaterial::TexUnits::NORMAL, tex);
			}
		}

		osg::Texture2D* getNormalMap()
		{
			return dynamic_cast<osg::Texture2D*>(getTextureAttribute((int)PbrUberMaterial::TexUnits::NORMAL, osg::StateAttribute::TEXTURE));
		}

		void setNormalMapEnabled(bool value)
		{
			if (hasNormalMap())
				setDefine("PBR_NORMAL_MAP", (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}

		bool hasNormalMap() const
		{
			return getDefinePair("PBR_NORMAL_MAP") != nullptr;
		}

		bool getNormalMapEnabled() const
		{
			auto def = getDefinePair("PBR_NORMAL_MAP");
			if (!def)
				return false;
			return def->second == osg::StateAttribute::ON;
		}

		void setEmissiveMap(osg::Texture2D* tex)
		{
			if (tex)
			{
				setDefine("PBR_EMISSIVE_MAP");
				setTextureAttributeAndModes((int)PbrUberMaterial::TexUnits::EMISSIVE, tex);
			}
		}

		osg::Texture2D* getEmmisiveMap()
		{
			return dynamic_cast<osg::Texture2D*>(getTextureAttribute((int)PbrUberMaterial::TexUnits::EMISSIVE, osg::StateAttribute::TEXTURE));
		}

		void setEmissiveMapEnabled(bool value)
		{
			if(hasEmmisiveMap())
				setDefine("PBR_EMISSIVE_MAP", (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}

		bool getEmmisiveMapEnabled() const
		{
			auto def = getDefinePair("PBR_EMISSIVE_MAP");
			if (!def)
				return false;
			return def->second == osg::StateAttribute::ON;
		}

		bool hasEmmisiveMap() const
		{
			return getDefinePair("PBR_EMISSIVE_MAP") != nullptr;
		}

		void setEmissiveFactor(const osg::Vec3& value)
		{
			getOrCreateUniform("oe_pbr_emissive_factor", osg::Uniform::FLOAT_VEC3)->set(value);
		}

		osg::Vec3f getEmissiveFactor() const
		{
			
			osg::Vec3f value(1.0f, 1.0f, 1.0f);
			auto uniform = getUniform("oe_pbr_emissive_factor");
			if (uniform)
				uniform->get(value);
			return value;
		}


		void setBrightness(float value)
		{
			getOrCreateUniform("oe_pbr_brightness", osg::Uniform::FLOAT)->set(value);
		}

		float getBrightness() const
		{
			float value = 1.0f;
			auto uniform = getUniform("oe_pbr_brightness");
			if (uniform)
				uniform->get(value);
			return value;
		}

		void setContrast(float value)
		{
			getOrCreateUniform("oe_pbr_contrast", osg::Uniform::FLOAT)->set(value);
		}

		float getContrast() const
		{
			float value = 1.0f;
			auto uniform = getUniform("oe_pbr_contrast");
			if (uniform)
				uniform->get(value);
			return value;
		}

		void setOcclusionMapEnabled(bool value)
		{
			setDefine("PBR_OCCLUSION_IN_METALROUGHNESS_MAP", (value ? osg::StateAttribute::ON : osg::StateAttribute::OFF));
		}

		bool getOcclusionMapEnabled() const
		{
			auto def = getDefinePair("PBR_OCCLUSION_IN_METALROUGHNESS_MAP");
			if (!def)
				return false;
			return def->second == osg::StateAttribute::ON;
		}

		bool hasOcclusionMap() const
		{
			return getDefinePair("PBR_OCCLUSION_IN_METALROUGHNESS_MAP") != nullptr;
		}

	};
}


#endif 
