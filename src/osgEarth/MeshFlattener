/* osgEarth
 * Copyright 2025 Pelican Mapping
 * MIT License
 */
#ifndef OSGEARTHSYMBOLOGY_MESH_FLATTENER
#define OSGEARTHSYMBOLOGY_MESH_FLATTENER

#include <osgEarth/Common>

namespace osgEarth { namespace Util
{
    /**
    * Prepares a scene graph for aggressive optimization.  Removes things like names, user data, callbacks, etc.
    * Use carefully.
    */
    struct OSGEARTH_EXPORT PrepareForOptimizationVisitor : public osg::NodeVisitor
    {
        PrepareForOptimizationVisitor();

        virtual void apply(osg::Node& node);
    };


    /**
     * Utility visitor to aid in flattening a scene graph.  Collects a map of StateSet stacks to Geodes.
     * Assumes that all transforms have already been removed from the scene graph.
     */
    struct OSGEARTH_EXPORT FlattenSceneGraphVisitor : public osg::NodeVisitor
    {
        FlattenSceneGraphVisitor();

        virtual void apply(osg::Node& node);

        virtual void apply(osg::Geode& geode);
        virtual void apply(osg::Geometry& geometry);

        void pushStateSet(osg::StateSet* stateSet);

        void popStateSet();

        /**
        * Build the flattened scene graph from the statesets and geodes.
        */
        osg::Node* build();

        typedef std::vector< osg::ref_ptr< osg::StateSet > > StateSetStack;
        typedef std::vector< osg::ref_ptr< osg::Geometry > > GeometryVector;

        StateSetStack _ssStack;

        typedef std::map< StateSetStack, GeometryVector > StateSetStackToGeometryMap;

        StateSetStackToGeometryMap _geometries;

        bool _mergeGeometry;
        unsigned _maxVertsPerCluster;
    };


    /**
     * Flattens "flatten" the given scene graph, turning it into a 
     * a very basic scene graph consisting of a group at the top with a list of geodes
     * each consisting of as small of a number of drawables as possible.
     *
     *  Limitations:
     *      This will only work on relatively simple scene graphs consisting of MatrixTransforms, Groups, Geodes, etc.
     *      If your scene graph constains things likes AutoTransforms, LightPointNodes, Sequences, etc it will not preserve them.
     */
    class OSGEARTH_EXPORT MeshFlattener
    {
    public:
        static void run( osg::Group* group );

        /** Run the flattener and indicate the target vertex count for the MergeGeometry stage. */
        static void run(osg::Group* group, unsigned maxVertsPerCluster);
    };
} }

#endif // OSGEARTHSYMBOLOGY_MESH_FLATTENER
