/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once

#include <osgEarth/Common>
#include <osgEarth/Registry>
#include <osgDB/Registry>
#include <osgDB/FileNameUtils>

namespace osgEarth { namespace Util
{
    /**
     * Create one of these as a static global to register an OSG plugin at startup.
     */
    template<class T>
    struct RegisterPluginLoader
    {
        RegisterPluginLoader(const std::string& name)
        {
            OE_HARD_ASSERT(osgDB::Registry::instance());
            osgDB::Registry::instance()->addReaderWriter(new T(name));
        }
    };

    /**
     * OSG plugin that will create an instance of a type with configuration options.
     */
    template<typename T, typename U>
    class PluginLoader : public osgDB::ReaderWriter
    {
    public: // Plugin stuff
        PluginLoader(const std::string& name) {
            supportsExtension(name, name);
        }

        inline ReadResult readObject(const std::string& filename, const osgDB::Options* dbOptions) const override
        {
            if (!acceptsExtension(osgDB::getLowerCaseFileExtension(filename)))
                return ReadResult::FILE_NOT_HANDLED;

            return ReadResult(new T(U::getConfigOptions(dbOptions)));
        }
    };

} } // namespace osgEarth
