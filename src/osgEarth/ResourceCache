/* osgEarth
 * Copyright 2025 Pelican Mapping
 * MIT License
 */

#ifndef OSGEARTHSYMBOLOGY_RESOURCE_CACHE_H
#define OSGEARTHSYMBOLOGY_RESOURCE_CACHE_H 1

#include <osgEarth/Common>
#include <osgEarth/Skins>
#include <osgEarth/InstanceResource>
#include <osgEarth/ResourceLibrary>
#include <osgEarth/Containers>
#include <osgEarth/Threading>

namespace osgEarth { namespace Util
{
    /**
     * Caches the runtime objects created by resources, so we can avoid creating them
     * each time they are referenced.
     *
     * This object is thread-safe.
     */
    class OSGEARTH_EXPORT ResourceCache : public osg::Referenced
    {
    public:
        /** 
         * Constructs a new resource cache.
         */
        ResourceCache();

        /**
         * Fetches the StateSet implementation corresponding to a Skin.
         * @param skin   Skin resource for which to get or create a state set.
         * @param output Result goes here.
         */
        bool getOrCreateStateSet(SkinResource* skin, osg::ref_ptr<osg::StateSet>& output, const osgDB::Options* readOptions);

        /**
         * Get the statistics collected from the skin cache.
         */
        const CacheStats getSkinStats() const { return _skinCache.getStats(); }

        /**
         * Gets a node corresponding to an instance resource.
         * @param skin   Instance resource for which to get or create a Node.
         * @param output Result goes here.
         */
        bool getOrCreateInstanceNode( InstanceResource* instance, osg::ref_ptr<osg::Node>& output, const osgDB::Options* readOptions );
        bool cloneOrCreateInstanceNode( InstanceResource* instance, osg::ref_ptr<osg::Node>& output, const osgDB::Options* readOptions );

        const CacheStats getInstanceStats() const { return _instanceCache.getStats(); }

        /**
         * Fetches the StateSet implementation for an entire ResourceLibrary.  This will contain a Texture2DArray with all of the skins merged into it.
         * @param library    The library 
         * @param output     Result goes here. 
         */
        bool getOrCreateStateSet( ResourceLibrary* library,  osg::ref_ptr<osg::StateSet>& output, const osgDB::Options* readOptions );

        bool getOrCreateLineTexture(const URI& uri, osg::ref_ptr<osg::Texture>& output, const osgDB::Options* readOptions);

    protected:
        virtual ~ResourceCache() { }

        //osg::ref_ptr<const osgDB::Options> _dbOptions;

        //typedef LRUCache<std::string, osg::observer_ptr<osg::StateSet> > SkinCache;
        typedef LRUCache<std::string, osg::ref_ptr<osg::StateSet> > SkinCache;
        SkinCache        _skinCache;
        std::mutex _skinMutex;

        typedef LRUCache<std::string, osg::ref_ptr<osg::Texture> > TextureCache;
        TextureCache _texCache;
        std::mutex _texMutex;

        //typedef LRUCache<std::string, osg::observer_ptr<osg::Node> > InstanceCache;
        typedef LRUCache<std::string, osg::ref_ptr<osg::Node> > InstanceCache;
        InstanceCache    _instanceCache;
        std::mutex _instanceMutex;
    };
} } 

#endif // OSGEARTHSYMBOLOGY_RESOURCE_CACHE_H
