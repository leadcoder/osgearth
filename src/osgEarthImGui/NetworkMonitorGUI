/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once
#include <osgEarthImGui/ImGuiPanel>
#include <osgEarth/NetworkMonitor>

namespace osgEarth
{
    class NetworkMonitorGUI : public ImGuiPanel
    {

        enum TypeFilter
        {
            TYPEFILTER_ALL = 0,
            TYPEFILTER_URI = 1,
            TYPEFILTER_CACHE = 2
        };

        enum RequestStatus
        {
            REQUESTSTATUS_ALL = 0,
            REQUESTSTATUS_OK = 1,
            REQUESTSTATUS_NOTFOUND = 2,
            REQUESTSTATUS_ERROR = 3,
            REQUESTSTATUS_BLACKLISTED = 4,
            REQUESTSTATUS_CANCELED = 5,
            REQUESTSTATUS_PENDING = 6
        };

    public:
        NetworkMonitorGUI() :
            ImGuiPanel("Network Monitor"),
            _typeFilter(TYPEFILTER_ALL),
            _statusFilter(REQUESTSTATUS_ALL)
        {
            memset(_filter, 0, sizeof(_filter));
        }

        void draw(osg::RenderInfo& ri) override
        {
            if (!isVisible())
                return;

            if (ImGui::Begin(name(), visible()))
            {
                NetworkMonitor::setEnabled(true);

                NetworkMonitor::Requests requests;
                NetworkMonitor::getRequests(requests);

                unsigned int filteredCount = 0;
                std::set< std::string > uniqueURLs;

                double minTime = DBL_MAX;
                double maxTime = 0.0;

                double now = osg::Timer::instance()->tick();
                std::string filterLower = osgEarth::toLower(_filter);                

                ImGui::SameLine();
                ImGui::SetNextItemWidth(500);
                ImGui::InputText("Filter", _filter, 128);

                const float combo_buffer = 50;

                const char* requestStatus[] = { "All", "OK", "Not Found", "Error", "Blacklisted", "Canceled", "Pending"};
                ImGui::SameLine();
                ImGui::SetNextItemWidth(ImGui::CalcTextSize("Blacklisted").x + combo_buffer);
                ImGui::Combo("Status", &_statusFilter, requestStatus, IM_ARRAYSIZE(requestStatus));

                const char* requestTypes[] = { "All", "URI", "Cache" };
                ImGui::SameLine();
                ImGui::SetNextItemWidth(ImGui::CalcTextSize("Cache").x + combo_buffer);
                ImGui::Combo("Type", &_typeFilter, requestTypes, IM_ARRAYSIZE(requestTypes));

                ImGui::SameLine();
                if (ImGui::Button("Clear"))
                {
                    NetworkMonitor::clear();
                }

                ImGui::SameLine();
                if (ImGui::Button("Save"))
                {
                    NetworkMonitor::saveCSV(requests, "network_requests.csv");
                }                

                ImVec2 availableContent = ImGui::GetContentRegionAvail();
                ImVec2 textSize = ImGui::CalcTextSize("A");

                ImVec2 tableSize(0, availableContent.y - textSize.y);

                if (ImGui::BeginTable("RequestTable", 5, ImGuiTableFlags_ScrollY | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_Borders, tableSize))
                {
                    ImGui::TableSetupScrollFreeze(0, 1); // Make top row always visible
                    ImGui::TableSetupColumn("Layer", ImGuiTableColumnFlags_WidthFixed, 300.0f);
                    ImGui::TableSetupColumn("Time(ms)", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                    ImGui::TableSetupColumn("Type", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                    ImGui::TableSetupColumn("Status", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                    ImGui::TableSetupColumn("Path", ImGuiTableColumnFlags_WidthStretch);
                    ImGui::TableHeadersRow();

                    for (NetworkMonitor::Requests::iterator itr = requests.begin(); itr != requests.end(); ++itr)
                    {
                        // Compute the min and max time for all requests
                        double requestStartTime = itr->second.startTime;
                        double requestEndTime = itr->second.isComplete ? itr->second.endTime : now;
                        if (requestStartTime < minTime)
                            minTime = requestStartTime;

                        if (requestEndTime > maxTime)
                            maxTime = requestEndTime;

                        // Filter based on status
                        if (_statusFilter != REQUESTSTATUS_ALL)
                        {
                            if (_statusFilter == REQUESTSTATUS_OK && itr->second.status.find("OK") == std::string::npos)
                                continue;

                            if (_statusFilter == REQUESTSTATUS_NOTFOUND && itr->second.status.find("Target not found") == std::string::npos)
                                continue;

                            if (_statusFilter == REQUESTSTATUS_BLACKLISTED && itr->second.status.find("Blacklisted") == std::string::npos)
                                continue;

                            if (_statusFilter == REQUESTSTATUS_ERROR && itr->second.status.find("error") == std::string::npos)
                                continue;

                            if (_statusFilter == REQUESTSTATUS_CANCELED && itr->second.status.find("Canceled") == std::string::npos)
                                continue;

                            if (_statusFilter == REQUESTSTATUS_PENDING && itr->second.status.find("Pending") == std::string::npos)
                                continue;
                        }

                        if (!filterLower.empty())
                        {
                            std::string uriLower = osgEarth::toLower(itr->second.uri);
                            std::string statusLower = osgEarth::toLower(itr->second.status);
                            std::string layerLower = osgEarth::toLower(itr->second.layer);
                            std::string typeLower = osgEarth::toLower(itr->second.type);

                            if (strstr(uriLower.c_str(), filterLower.c_str()) == NULL &&
                                strstr(statusLower.c_str(), filterLower.c_str()) == NULL &&
                                strstr(layerLower.c_str(), filterLower.c_str()) == NULL &&
                                strstr(typeLower.c_str(), filterLower.c_str()) == NULL)
                            {
                                continue;
                            }
                        }

                        bool showCache = _typeFilter == TYPEFILTER_ALL || _typeFilter == TYPEFILTER_CACHE;
                        bool showURI = _typeFilter == TYPEFILTER_ALL || _typeFilter == TYPEFILTER_URI;

                        if (!showCache && itr->second.type == "Cache")
                        {
                            continue;
                        }

                        if (!showURI && itr->second.type == "URI")
                        {
                            continue;
                        }

                        ImVec4 color = ImVec4(1.0, 1.0, 1.0, 1.0);
                        bool failed = false;
                        bool canceled = false;
                        if (itr->second.isComplete)
                        {
                            if (itr->second.status.find("OK") != std::string::npos)
                            {
                                color = ImVec4(0, 1, 0, 1); // green
                            }
                            else if (itr->second.status.find("Canceled") != std::string::npos)
                            {
                                color = ImVec4(.5, .5, .5, 1); // grey
                                canceled = true;
                            }
                            else
                            {
                                // Color bad requests red
                                color = ImVec4(1, 0, 0, 1);
                                failed = true;
                            }
                        }

                        uniqueURLs.insert(itr->second.uri);
                        ++filteredCount;

                        ImGui::PushID(itr->first);
                        ImGui::TableNextColumn();
                        ImGui::Text(itr->second.layer.c_str()); ImGui::NextColumn();
                        char buf[64];
                        sprintf(buf, "%.1lf", itr->second.getDuration());
                        ImGui::SetCursorPosX(ImGui::GetCursorPosX() + ImGui::GetColumnWidth() - ImGui::CalcTextSize(buf).x
                            - ImGui::GetScrollX() - 2 * ImGui::GetStyle().ItemSpacing.x);

                        ImGui::TableNextColumn();
                        ImGui::Text(buf);

                        ImGui::TableNextColumn();
                        ImGui::Text(itr->second.type.c_str());

                        ImGui::TableNextColumn();
                        ImGui::Text(itr->second.status.c_str());

                        ImGui::TableNextColumn();
                        if (ImGui::SmallButton("Copy"))
                        {
                            ImGui::SetClipboardText(itr->second.uri.c_str());
                        }
                        ImGui::SameLine();
                        ImGui::TextColored(color, "%s (%d)", itr->second.uri.c_str(), itr->second.count);  ImGui::NextColumn();
                        ImGui::PopID();
                    }                    

                    // Keep scroll position at the bottom so we can see new network requests as they come in if they are scrolled to the bottom already
                    if (ImGui::GetScrollY() == ImGui::GetScrollMaxY())
                    {
                        ImGui::SetScrollHereY(1.0);
                    }
                    ImGui::EndTable();
                }

                double totalTime = maxTime > minTime ? osg::Timer::instance()->delta_s(minTime, maxTime) : 0.0;

                if (filterLower.empty() && _typeFilter == TYPEFILTER_ALL && _statusFilter == REQUESTSTATUS_ALL)
                {
                    ImGui::Text("%d requests | unique %d | %.1f s", requests.size(), uniqueURLs.size(), totalTime);
                }
                else
                {
                    ImGui::Text("%d / %d requests | unique %d | %.1f s", filteredCount, requests.size(), uniqueURLs.size(), totalTime);
                }

                ImGui::End();
            }
            else
            {
                NetworkMonitor::setEnabled(false);
            }
        }

        int _typeFilter;
        int _statusFilter;
        char _filter[128];
    };
}
