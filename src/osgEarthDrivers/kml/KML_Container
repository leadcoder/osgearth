/* osgEarth
 * Copyright 2025 Pelican Mapping
 * MIT License
 */
#ifndef OSGEARTH_DRIVER_KML_KML_CONTAINER
#define OSGEARTH_DRIVER_KML_KML_CONTAINER 1

#include "KML_Common"
#include "KML_Feature"

namespace osgEarth_kml
{
    using namespace osgEarth;

    struct KML_Container : public KML_Feature
    {
        virtual void scan( xml_node<>* node, KMLContext& cx )
        {
            KML_Feature::scan(node, cx);
        }

        virtual void scan2( xml_node<>* node, KMLContext& cx )
        {
            KML_Feature::scan2(node, cx);
        }

        virtual void build( xml_node<>* node, KMLContext& cx, osg::Node* working )
        {
            // assumes the top of the group stack has a new and valid Node.
            // don't call this is there was an error in the subclass build() method
            KML_Feature::build(node, cx, working);
        }
    };

} // namespace osgEarth_kml

#endif // OSGEARTH_DRIVER_KML_KML_CONTAINER
