/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_SPLATTING_MATERIALS_H
#define OSGEARTH_PROCEDURAL_SPLATTING_MATERIALS_H

#include <osgEarthProcedural/Export>
#include <osgEarth/TextureArena>
#include <osgDB/ReaderWriter>

namespace osgEarth { namespace Procedural
{
    /**
     * Loader for RGBH data (raw or compressed)
     */
    class OSGEARTHPROCEDURAL_EXPORT RGBH_Loader : public osgDB::ReaderWriter
    {
    public:
        RGBH_Loader();
        ReadResult readImage(const std::string&, const osgDB::Options*) const override;
        WriteResult writeImage(const osg::Image&, const std::string&, const osgDB::Options*) const override;

        ReadResult readImageFromSourceData(const std::string&, const osgDB::Options*) const;
        ReadResult readImageEncoded(const std::string&, const osgDB::Options*) const;
    };

    /**
     * Loader for NNRA data (raw or compressed)
     */
    class OSGEARTHPROCEDURAL_EXPORT NNRA_Loader : public osgDB::ReaderWriter
    {
    public:
        NNRA_Loader();
        ReadResult readImage(const std::string&, const osgDB::Options*) const override;
        WriteResult writeImage(const osg::Image&, const std::string&, const osgDB::Options*) const override;

        ReadResult readImageFromSourceData(const std::string&, const osgDB::Options*) const;
        ReadResult readImageEncoded(const std::string&, const osgDB::Options*) const;
    };

    class RGBH_NNRA_Loader
    {
    public:
        static bool load(
            const URI& colorURI,
            TextureArena* arena,
            const osgDB::Options* options);
    };

} } // namespace osgEarth::Procedural

#endif // OSGEARTH_PROCEDURAL_SPLATTING_MATERIALS_H
