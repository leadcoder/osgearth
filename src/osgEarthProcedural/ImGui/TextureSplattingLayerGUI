#ifndef OSGEARTH_PROCEDURAL_TEXTURESPLATTING_LAYER_GUI
#define OSGEARTH_PROCEDURAL_TEXTURESPLATTING_LAYER_GUI

#include <osgEarthProcedural/TextureSplattingLayer>
#include <osgEarth/ImGui/ImGui>

namespace osgEarth {
    namespace Procedural
    {
        using namespace osgEarth;

        struct TextureSplattingLayerGUI : public GUI::BaseGUI
        {
            osg::observer_ptr<TextureSplattingLayer> _tslayer;
            bool _installed;
            float _blend_start;
            float _blend_end;
            float _blend_rgbh_mix;
            float _blend_normal_mix;
            float _depth;
            float _normal_power;
            float _ao_power;
            float _brightness;
            float _contrast;
            float _dense_contrast;
            float _dense_brightness;
            float _lush_brightness;
            float _snow;
            float _snow_min_elev;
            float _snow_max_elev;
            bool _lifemap_direct;
            float _rugged_power;
            float _dense_power;
            float _lush_power;

            TextureSplattingLayerGUI() : GUI::BaseGUI("Splatting")
            {
                _installed = false;
                _blend_start = 2500.0f;
                _blend_end = 500.0f;
                _blend_rgbh_mix = 0.85f;
                _blend_normal_mix = 0.85f;
                _depth = 0.02f;
                _normal_power = 1.0f;
                _ao_power = 1.0f;
                _brightness = 1.0f;
                _contrast = 1.0f;
                _dense_contrast = 0.0f;
                _dense_brightness = 0.0f;
                _lush_brightness = 0.0f;
                _snow = 0.0f;
                _snow_min_elev = 0.0f;
                _snow_max_elev = 3500.0f;

                _lifemap_direct = false;
                _rugged_power = 1.0;
                _dense_power = 1.0;
                _lush_power = 1.0;
            }

            void load(const Config& conf) override
            {
                //conf.get("brightness", _brightness);
                //conf.get("contrast", _contrast);
                //conf.get("dense_contrast", _dense_contrast);
                //conf.get("dense_brightness", _dense_brightness);
                //conf.get("snow", _snow);
                //conf.get("snow_min_elev", _snow_min_elev);
                //conf.get("snow_max_elev", _snow_max_elev);
            }

            void save(Config& conf) override
            {
                //conf.set("brightness", _brightness);
                //conf.set("contrast", _contrast);
                //conf.set("dense_contrast", _dense_contrast);
                //conf.set("dense_brightness", _dense_brightness);
                //conf.set("snow", _snow);
                //conf.set("snow_min_elev", _snow_min_elev);
                //conf.set("snow_max_elev", _snow_max_elev);
            }

            void draw(osg::RenderInfo& ri) override
            {
                if (!isVisible())
                    return;

                if (!findLayerOrHide(_tslayer, ri))
                    return;

                if (!_installed)
                {
                    // activate tweakable uniforms
                    stateset(ri)->setDataVariance(osg::Object::DYNAMIC);
                    stateset(ri)->removeDefine("OE_TWEAKABLE");
                    stateset(ri)->setDefine("OE_TWEAKABLE", 0x7);

                    //stateset(ri)->setDefine("OE_SNOW", 0x7);
                    stateset(ri)->removeDefine("OE_LIFEMAP_DIRECT");
                    stateset(ri)->setDefine("OE_LIFEMAP_DIRECT", "0", 0x7);
                    _installed = true;
                }

                ImGui::Begin(name(), visible());
                {
                    ImGui::SliderFloat("Normal power", &_normal_power, 0.0f, 4.0f);
                    stateset(ri)->addUniform(new osg::Uniform("normal_power", _normal_power), 0x7);

                    ImGui::SliderFloat("AO power", &_ao_power, 0.0f, 16.0f);
                    stateset(ri)->addUniform(new osg::Uniform("ao_power", _ao_power), 0x7);

                    ImGui::SliderFloat("Displacement depth", &_depth, 0.0f, 1.0f, "%.2f", ImGuiSliderFlags_Logarithmic);
                    stateset(ri)->addUniform(new osg::Uniform("oe_depth", _depth), 0x7);

                    if (_tslayer->options().numLevels() > 1)
                    {
                        ImGui::SliderFloat("Level blend start (m)", &_blend_start, 0.0f, 5000.0f);
                        stateset(ri)->addUniform(new osg::Uniform("oe_splat_blend_start", _blend_start), 0x7);

                        ImGui::SliderFloat("Level blend end (m)", &_blend_end, 0.0f, 5000.0f);
                        stateset(ri)->addUniform(new osg::Uniform("oe_splat_blend_end", _blend_end), 0x7);

                        ImGui::SliderFloat("RGBH mix", &_blend_rgbh_mix, 0.0f, 1.0f);
                        stateset(ri)->addUniform(new osg::Uniform("oe_splat_blend_rgbh_mix", _blend_rgbh_mix), 0x7);

                        ImGui::SliderFloat("Normal mix", &_blend_normal_mix, 0.0f, 1.0f);
                        stateset(ri)->addUniform(new osg::Uniform("oe_splat_blend_normal_mix", _blend_normal_mix), 0x7);
                    }

                    ImGui::SliderFloat("Global brightness", &_brightness, 0.0f, 4.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_splat_brightness", _brightness), 0x7);

                    ImGui::SliderFloat("Global contrast", &_contrast, 0.0f, 4.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_splat_contrast", _contrast), 0x7);

                    ImGui::SliderFloat("Density contrast boost", &_dense_contrast, -1.0f, 1.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_dense_contrast", _dense_contrast), 0x7);

                    ImGui::SliderFloat("Density brightness boost", &_dense_brightness, -1.0f, 1.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_dense_brightness", _dense_brightness), 0x7);

                    ImGui::SliderFloat("Lush brightness adjust", &_lush_brightness, -1.0f, 1.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_lush_brightness", _lush_brightness), 0x7);

#if 0
                    ImGui::SliderFloat("Snow", &_snow, 0.0f, 1.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_snow", _snow), 0x7);

                    ImGui::SliderFloat("Snow bottom elev", &_snow_min_elev, 0.0f, 2500.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_snow_min_elev", _snow_min_elev), 0x7);

                    ImGui::SliderFloat("Snow top elev", &_snow_max_elev, 2500.0f, 5000.0f);
                    stateset(ri)->addUniform(new osg::Uniform("oe_snow_max_elev", _snow_max_elev), 0x7);
#endif

                    if (ImGui::Checkbox("Hex tile optimization", &_tslayer->options().useHexTiler().mutable_value()))
                    {
                        stateset(ri)->setDefine("OE_SPLAT_HEX_TILER",
                            _tslayer->options().useHexTiler() == true ? "1" : "0", 
                            0x07);
                    }

                    // lifemap adjusters
                    ImGui::Separator();

                    if (ImGui::Checkbox("LifeMap Direct Set", &_lifemap_direct))
                    {
                        if (_lifemap_direct) {
                            stateset(ri)->removeDefine("OE_LIFEMAP_DIRECT");
                            stateset(ri)->setDefine("OE_LIFEMAP_DIRECT", "1", 0x7);
                            _rugged_power = std::min(_rugged_power, 1.0f);
                            _dense_power = std::min(_dense_power, 1.0f);
                            _lush_power = std::min(_lush_power, 1.0f);
                        }
                        else {
                            stateset(ri)->removeDefine("OE_LIFEMAP_DIRECT");
                            stateset(ri)->setDefine("OE_LIFEMAP_DIRECT", "0", 0x7);
                        }
                    }

                    float lm_max = _lifemap_direct ? 1.0f : 4.0f;

                    ImGui::SliderFloat(_lifemap_direct ? "Dense" : "Dense multiplier", &_dense_power, 0.0f, lm_max);
                    stateset(ri)->getOrCreateUniform("dense_power", osg::Uniform::FLOAT)->set(_dense_power);

                    ImGui::SliderFloat(_lifemap_direct ? "Rugged" : "Rugged multiplier", &_rugged_power, 0.0f, lm_max);
                    stateset(ri)->getOrCreateUniform("rugged_power", osg::Uniform::FLOAT)->set(_rugged_power);

                    ImGui::SliderFloat(_lifemap_direct ? "Lush" : "Lush multiplier", &_lush_power, 0.0f, lm_max);
                    stateset(ri)->getOrCreateUniform("lush_power", osg::Uniform::FLOAT)->set(_lush_power);
                }
                ImGui::End();
            }
        };
    }
}
#endif // OSGEARTH_PROCEDURAL_TEXTURESPLATTING_LAYER_GUI

//REGISTER_OSGEARTH_IMGUI(TextureSplattingLayer, []()
//    {
//        return new osgEarth::Procedural::TextureSplattingLayerGUI();
//    }
//)
