#ifndef OSGEARTH_PROCEDURAL_LIFEMAP_LAYER_GUI
#define OSGEARTH_PROCEDURAL_LIFEMAP_LAYER_GUI

#include <osgEarthProcedural/LifeMapLayer>
#include <osgEarthProcedural/TextureSplattingLayer>
#include <osgEarth/ImGui/ImGui>

namespace {
    const char* render_lifemap = R"(
#version 450
#pragma vp_function oeiu_render_lifemap, fragment_lighting, last
void oeiu_render_lifemap(inout vec4 color) { color.a = 1.0; }
)";
    const char* render_density = R"(
#version 450
#pragma vp_function oeui_render_density, fragment_lighting, last
void oeui_render_density(inout vec4 color) { color = vec4(0,color.g,0,1); }
)";

    const char* render_lush = R"(
#version 450
#pragma vp_function oeui_render_lush, fragment_lighting, last
void oeui_render_lush(inout vec4 color) { color = vec4(0,0,color.b, 1); }
)";

    const char* render_rugged = R"(
#version 450
#pragma vp_function oeui_render_rugged, fragment_lighting, last
void oeui_render_rugged(inout vec4 color) { color = vec4(color.r, 0, 0, 1); }
)";

    const char* render_alpha = R"(
#version 450
#pragma vp_function oeui_render_alpha, fragment_lighting, last
void oeui_render_alpha(inout vec4 color) { color = vec4(color.a, color.a, color.a, 1.0); }
)";
}

namespace osgEarth
{
    namespace Procedural
    {
        using namespace osgEarth;

        struct LifeMapLayerGUI : public GUI::BaseGUI
        {
            osg::observer_ptr<MapNode> _mapNode;
            osg::observer_ptr<LifeMapLayer> _lifemap;
            osg::observer_ptr<TextureSplattingLayer> _splat;
            VirtualProgram* _vp;
            std::string _renderMode;

            LifeMapLayerGUI() : GUI::BaseGUI("Life Map"),
                _vp(nullptr)
            {
                //nop
            }

            void setRenderMode(const std::string& mode, osg::RenderInfo& ri)
            {
                if (!_vp)
                    _vp = VirtualProgram::getOrCreate(_lifemap->getOrCreateStateSet());

                if (!_renderMode.empty())
                    ShaderLoader::unload(_vp, _renderMode);
                _renderMode = mode;
                if (!_renderMode.empty())
                    ShaderLoader::load(_vp, _renderMode);

                bool show = !_renderMode.empty();
                _lifemap->setVisible(show);
                if (_splat.valid())
                    _splat->setVisible(!show);
            }

            void draw(osg::RenderInfo& ri) override
            {
                if (!findNodeOrHide(_mapNode, ri))
                    return;
                if (!findLayerOrHide(_lifemap, ri))
                    return;

                findLayer(_splat, ri);

                ImGui::Begin("Life Map");

                // render the layer?
                ImGui::TextColored(ImVec4(1, 1, 0, 1), "Visualization");
                {
                    static int s_renderMode = 0;
                    int m = 0;

                    if (ImGui::RadioButton("Normal", &s_renderMode, m++)) {
                        setRenderMode("", ri);
                    }
                    if (ImGui::RadioButton("Ruggedness", &s_renderMode, m++)) {
                        setRenderMode(render_rugged, ri);
                    }
                    if (ImGui::RadioButton("Density", &s_renderMode, m++)) {
                        setRenderMode(render_density, ri);
                    }
                    if (ImGui::RadioButton("Lushness", &s_renderMode, m++)) {
                        setRenderMode(render_lush, ri);
                    }
                    if (ImGui::RadioButton("Material", &s_renderMode, m++)) {
                        setRenderMode(render_alpha, ri);
                    }
                    if (ImGui::RadioButton("All", &s_renderMode, m++)) {
                        setRenderMode(render_lifemap, ri);
                    }
                }

                ImGui::Separator();
                ImGui::TextColored(ImVec4(1, 1, 0, 1), "Generator Settings");

                LifeMapLayer::Options& o = _lifemap->options();

                ImGui::TextColored(ImVec4(1, 1, 0, 1), "LifeMap contributions levels:");
                ImGui::Separator();
                ImGui::SliderFloat("Coverage contrib", &o.landCoverWeight().mutable_value(), 0.0f, 1.0f);
                ImGui::Indent();
                float value = o.landCoverBlur()->as(Units::METERS);
                if (ImGui::SliderFloat("Coverage blur (m)", &value, 0.0f, 100.0f))
                    o.landCoverBlur()->set(value, Units::METERS);
                ImGui::Unindent();

                if (_lifemap->getColorLayer())
                {
                    ImGui::SliderFloat("Imagery color contrib", &o.colorWeight().mutable_value(), 0.0f, 1.0f);
                }

                ImGui::SliderFloat("Terrain contrib", &o.terrainWeight().mutable_value(), 0.0f, 1.0f);
                ImGui::Indent();
                ImGui::SliderFloat("Slope contrib", &o.slopeIntensity().mutable_value(), 1.0f, 10.0f);
                ImGui::SliderFloat("Slope cutoff", &o.slopeCutoff().mutable_value(), 0.0f, 1.0f);
                ImGui::Unindent();

                ImGui::SliderFloat("Noise contrib", &o.noiseWeight().mutable_value(), 0.0f, 1.0f);

                if (ImGui::Button("Apply Changes"))
                {
                    // make sure the cache is off
                    _lifemap->setCachePolicy(CachePolicy::NO_CACHE);

                    _mapNode->getTerrainEngine()->invalidateRegion(
                        { _lifemap.get() },
                        GeoExtent::INVALID);
                }

                ImGui::End();
            }
        };
    }
}
#endif // OSGEARTH_PROCEDURAL_LIFEMAP_LAYER_GUI

//REGISTER_OSGEARTH_IMGUI(LifeMapLayer, []()
//    {
//        return new osgEarth::Procedural::LifeMapLayerGUI();
//    }
//)
