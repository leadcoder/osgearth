/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_LIFE_MAP_LAYER_H
#define OSGEARTH_PROCEDURAL_LIFE_MAP_LAYER_H

#include "Export"
#include "BiomeLayer"
#include <osgEarth/ImageLayer>
#include <osgEarth/ElevationPool>
#include <osgEarth/LayerReference>
#include <osgEarth/LandCoverLayer>

namespace osgEarth { namespace Procedural
{
    using namespace osgEarth;

    enum LifeMap {
        LIFEMAP_RUGGED = 0,
        LIFEMAP_DENSE = 1,
        LIFEMAP_LUSH = 2,
        LIFEMAP_SPECIAL = 3
    };

    class OSGEARTHPROCEDURAL_EXPORT LifeMapLayer : public ImageLayer
    {
    public:
        class OSGEARTHPROCEDURAL_EXPORT Options : public ImageLayer::Options
        {
        public:
            META_LayerOptions(osgEarth, Options, ImageLayer::Options);
            OE_OPTION_LAYER(BiomeLayer, biomeLayer);
            OE_OPTION_LAYER(ImageLayer, maskLayer);
            OE_OPTION_LAYER(FeatureSource, landUseLayer);
            OE_OPTION_LAYER(ImageLayer, colorLayer);

            OE_OPTION(bool, useLandCover);
            OE_OPTION(bool, useTerrain);
            OE_OPTION(float, landCoverWeight);
            OE_OPTION(Distance, landCoverBlur);
            OE_OPTION(float, terrainWeight);
            OE_OPTION(float, colorWeight);
            OE_OPTION(float, slopeIntensity);

            OE_OPTION(bool, useLandUse);
            OE_OPTION(bool, useColor);

            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarthProcedural, LifeMapLayer, Options, ImageLayer, LifeMap);

        void setBiomeLayer(BiomeLayer*);
        BiomeLayer* getBiomeLayer() const;

        void setMaskLayer(ImageLayer*);
        ImageLayer* getMaskLayer() const;

        void setLandUseLayer(FeatureSource*);
        FeatureSource* getLandUseLayer() const;

        void setColorLayer(ImageLayer*);
        ImageLayer* getColorLayer() const;

        void setUseLandCover(bool value);
        bool getUseLandCover() const;

        void setUseTerrain(bool value);
        bool getUseTerrain() const;

        void setUseLandUse(bool value);
        bool getUseLandUse() const;

        void setUseColor(bool value);
        bool getUseColor() const;

    protected:

        virtual void init() override;

        virtual Status openImplementation() override;

        virtual Status closeImplementation() override;
            
        virtual GeoImage createImageImplementation(const TileKey&, ProgressCallback*) const override;

    public:

        virtual void addedToMap(const Map* map) override; 

        virtual void removedFromMap(const Map* map) override;

    protected:

        virtual ~LifeMapLayer() { }

        osg::observer_ptr<const Map> _map;
        mutable ElevationPool::WorkingSet _workingSet;
        osg::ref_ptr<osg::Image> _noiseFunc;
        LandCoverLayerVector _landCoverLayers;
        osg::ref_ptr<LandCoverDictionary> _landCoverDictionary;
    };

} } // namespace osgEarth::Procedural

#endif // OSGEARTH_PROCEDURAL_LIFE_MAP_LAYER_H
